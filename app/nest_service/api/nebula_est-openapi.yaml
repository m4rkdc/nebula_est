openapi: 3.0.3
info:
  title: Nebula Enrollment over Secure Transport - OpenAPI 3.0
  description: |-
    This is a simple Public Key Infrastructure Management Server based on the RFC7030 Enrollment over Secure Transport Protocol for a Nebula Mesh Network. The Service accepts requests from mutually authenticated TLS-PSK connections to create Nebula Certificates for the client, either by signing client-generated Nebula Public Keys or by generating Nebula key pairs and signing the server-generated Nebula public key and to create Nebula configuration files for the specific client.
    This Service acts as a Facade for the Nebula CA service (actually signign or creating the Nebula keys) and the Nebula Config service (actually creating the nebula Config. files).
  termsOfService: http://swagger.io/terms/
  contact:
    email: gianmarco.decola@studio.unibo.it
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.1
externalDocs:
  description: Find out more about EST (RFC7030)
  url: https://www.rfc-editor.org/rfc/rfc7030.html
servers:
- url: "{protocol}://nebula_est/"
  variables:
    protocol:
      enum:
      - http
      - https
      default: https
tags:
- name: ncsr
  description: Operations about a Nebula Certificate Signing Request made to the Nebula
    EST service. It can either simply request to sign a client-generated Nebula Public
    Key or request to generate it on the server and then sign it.
- name: cacert
  description: Operations about the Nebula CA certs (i.e. getting the Nebula CA cert.).
paths:
  /ncsr:
    post:
      tags:
      - ncsr
      summary: Open a Nebula CSR application
      description: Open a Nebula Certificate Signing Request application by providing
        the Nebula hostname of the client
      operationId: ncsrApplication
      requestBody:
        description: The future Nebula hostname of the client requesting the certificate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hostname'
        required: true
      responses:
        "200":
          description: "Successful operation: valid hostname"
          headers:
            Location:
              description: The location of the new NCSR Status page
              style: simple
              explode: false
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                type: integer
                description: "A random integer, to be encrypted for the Nebula Private\
                  \ key Proof of Possession"
                format: int64
                x-content-type: application/json
        "400":
          description: Invalid hostname supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 400
                message: Invalid hostname. The hostname you provided was not found
                  in the Configuration service list
        "409":
          description: Nebula CSR for this hostname already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 409
                message: "Conflict. A Nebula CSR for the hostname you provided already\
                  \ exists. If you want to re-enroll, please visit https://nebula_est/ncsr/{hostname}/reenroll"
    servers:
    - url: http://nebula_est/
  /ncsr/{hostname}:
    get:
      tags:
      - ncsr
      summary: Get NCSR status
      description: Get the Nebula Certificate Signing Request status for the specified
        hostname
      operationId: ncsrStatus
      parameters:
      - name: hostname
        in: path
        description: Hostname of the client
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/hostname'
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NebulaCSRStatus'
              example: Pending
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 404
                message: "Not found. Could not found an open Nebula CSR application\
                  \ for the specified hostname. If you want to enroll, provide your\
                  \ hostname to http://nebula_est//ncsr"
  /ncsr/{hostname}/enroll:
    post:
      tags:
      - ncsr
      summary: Send a Nebula CSR
      description: "Send a full Nebula CSR, comprising client-generated Nebula Public\
        \ key to be signed for enrollment and POP"
      operationId: enroll
      parameters:
      - name: hostname
        in: path
        description: Hostname of the client
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/hostname'
      requestBody:
        description: The Nebula CSR containing the Nebula Public key to be signed
          and POP
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NebulaCSR'
        required: true
      responses:
        "200":
          description: "Successful operation: POP validated, Nebula Certificate and\
            \ Configuration file issued."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NebulaCSRResponse'
        "400":
          description: "Either POP is not validated or absent, or Public Key is absent,\
            \ or serverkeygen/rename/rekey fields are true"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 400
                message: POP could not be validated
        "403":
          description: The hostname of the applicant (the one in the Nebula CSR) is
            different from the one in the URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 403
                message: Unhautorized. The hostname in the URL and the one in the
                  Nebula CSR are different.
        "409":
          description: This hostname has already enrolled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 409
                message: "Conflict. This hostname has already enrolled. If you want\
                  \ to re-enroll, please visit https://nebula_est/ncsr/{hostname}/reenroll"
  /ncsr/{hostname}/reenroll:
    post:
      tags:
      - ncsr
      summary: Send a Nebula CSR to re-enroll
      description: "Send a Nebula CSR for re-enrollment, which can comprise the rekey\
        \ falg se to tru and the new client-generated Nebula Public key to be signed\
        \ for re-enrollment or the serverkeygen field set to true for server-side\
        \ key regeneration and the rename flag to true if there is a change in hostname"
      operationId: reenroll
      parameters:
      - name: hostname
        in: path
        description: Hostname of the client
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/hostname'
      requestBody:
        description: The new Nebula CSR
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NebulaCSR'
      responses:
        "200":
          description: "Successful operation: Nebula Certificate and Configuration\
            \ file re-issued."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NebulaCSRResponse'
        "400":
          description: "Either rekey is true and Public Key is absent, or serverkeygen\
            \ is true and rekey is false"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 400
                message: "Invalid operation: rekey is true but serverkeygen is fase\
                  \ and Public key is absent"
        "403":
          description: The hostname of the applicant (the one in the Nebula CSR) is
            different from the one in the URL and the rename field is false or absent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 403
                message: Unhautorized. The hostname in the URL and the one in the
                  Nebula CSR are different and the rename field is false or absent.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 404
                message: "Not found. Could not found an open Nebula CSR application\
                  \ for the specified hostname. If you want to enroll, provide your\
                  \ hostname to http://nebula_est//ncsr"
  /ncsr/{hostname}/serverkeygen:
    post:
      tags:
      - ncsr
      summary: Generate client's Nebula key pairs
      description: Relays the request to generate client's Nebula key pairs to the
        Nebula CA and returns the signed certificate
      operationId: serverkeygen
      parameters:
      - name: hostname
        in: path
        description: Hostname of the client
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/hostname'
      requestBody:
        description: The Nebula CSR of the client. serverkeygen field must be true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NebulaCSR'
        required: true
      responses:
        "200":
          description: "Successful operation: Nebula Certificate and Configuration\
            \ file issued."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NebulaCSRResponse'
        "400":
          description: Either serverkeygen is false or Public key is present or /rename/rekey
            fields are true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 400
                message: "Invalid operation: Public key is present but you requested\
                  \ a server keygen. Try sending this CSR to https://nebula_est/{hostname}/enroll"
        "403":
          description: The hostname of the applicant (the one in the Nebula CSR) is
            different from the one in the URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 403
                message: Unhautorized. The hostname in the URL and the one in the
                  Nebula CSR are different.
        "409":
          description: This hostname has already enrolled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 409
                message: "Conflict. This hostname has already enrolled. If you want\
                  \ to re-enroll, please visit https://nebula_est/ncsr/{hostname}/reenroll"
  /cacerts:
    get:
      tags:
      - cacert
      summary: Gets Nebula CAs certs
      operationId: cacerts
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NebulaCertificate'
                x-content-type: application/json
        "503":
          description: Service Unavailable
          headers:
            Retry-After:
              description: Amount of time in which the resource is supposed to be
                available
              style: simple
              explode: false
              schema:
                type: integer
                format: int64
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 503
                message: Service Unavailable. Please retry after waiting the amount
                  specified in the Retry-After header field.
    servers:
    - url: http://nebula_est/
components:
  schemas:
    hostname:
      type: string
      format: hostname
      example: lighthouse1
    NebulaCertificate:
      type: object
      properties:
        NebulaCertificateDetails:
          $ref: '#/components/schemas/Details'
        Signature:
          type: string
          format: binary
      example:
        Signature: ""
        NebulaCertificateDetails:
          Subnets:
          - Subnets
          - Subnets
          Issuer: Issuer
          Groups:
          - Groups
          - Groups
          PublicKey: ""
          IsCA: true
          NotBefore:
            ext: 6
            loc:
              extend: extend
              cacheEnd: 7
              cacheStart: 2
              tx:
              - isstd: true
                isutc: true
                index: 5
                when: 5
              - isstd: true
                isutc: true
                index: 5
                when: 5
              name: name
              zones:
              - offset: 1
                isDST: true
                name: name
              - offset: 1
                isDST: true
                name: name
              cacheZone: null
            wall: 0
          NotAfter: null
          Ips:
          - Ips
          - Ips
          InvertedGroups: ""
          Name: Name
    Details:
      type: object
      properties:
        Name:
          type: string
        Ips:
          type: array
          items:
            type: string
            format: ipv4 | ipv6
        Subnets:
          type: array
          items:
            type: string
            format: ipv4 | ipv6
        Groups:
          type: array
          items:
            type: string
        NotBefore:
          $ref: '#/components/schemas/Time'
        NotAfter:
          $ref: '#/components/schemas/Time'
        PublicKey:
          type: string
          format: binary
        IsCA:
          type: boolean
        Issuer:
          type: string
        InvertedGroups:
          type: object
          additionalProperties: true
      example:
        Subnets:
        - Subnets
        - Subnets
        Issuer: Issuer
        Groups:
        - Groups
        - Groups
        PublicKey: ""
        IsCA: true
        NotBefore:
          ext: 6
          loc:
            extend: extend
            cacheEnd: 7
            cacheStart: 2
            tx:
            - isstd: true
              isutc: true
              index: 5
              when: 5
            - isstd: true
              isutc: true
              index: 5
              when: 5
            name: name
            zones:
            - offset: 1
              isDST: true
              name: name
            - offset: 1
              isDST: true
              name: name
            cacheZone: null
          wall: 0
        NotAfter: null
        Ips:
        - Ips
        - Ips
        InvertedGroups: ""
        Name: Name
    Time:
      type: object
      properties:
        wall:
          type: integer
          format: uint64
        ext:
          type: integer
          format: int64
        loc:
          $ref: '#/components/schemas/Location'
      example:
        ext: 6
        loc:
          extend: extend
          cacheEnd: 7
          cacheStart: 2
          tx:
          - isstd: true
            isutc: true
            index: 5
            when: 5
          - isstd: true
            isutc: true
            index: 5
            when: 5
          name: name
          zones:
          - offset: 1
            isDST: true
            name: name
          - offset: 1
            isDST: true
            name: name
          cacheZone: null
        wall: 0
    Location:
      type: object
      properties:
        name:
          type: string
        zones:
          type: array
          items:
            $ref: '#/components/schemas/zone'
        tx:
          type: array
          items:
            $ref: '#/components/schemas/zoneTrans'
        extend:
          type: string
        cacheStart:
          type: integer
          format: int64
        cacheEnd:
          type: integer
          format: int64
        cacheZone:
          $ref: '#/components/schemas/zone'
      example:
        extend: extend
        cacheEnd: 7
        cacheStart: 2
        tx:
        - isstd: true
          isutc: true
          index: 5
          when: 5
        - isstd: true
          isutc: true
          index: 5
          when: 5
        name: name
        zones:
        - offset: 1
          isDST: true
          name: name
        - offset: 1
          isDST: true
          name: name
        cacheZone: null
    zone:
      type: object
      properties:
        name:
          type: string
        offset:
          type: integer
        isDST:
          type: boolean
      example:
        offset: 1
        isDST: true
        name: name
    zoneTrans:
      type: object
      properties:
        when:
          type: integer
          format: int64
        index:
          type: integer
          format: uint8
        isstd:
          type: boolean
        isutc:
          type: boolean
      example:
        isstd: true
        isutc: true
        index: 5
        when: 5
    NebulaCSR:
      type: object
      properties:
        serverKeygen:
          type: boolean
        rename:
          type: boolean
        rekey:
          type: boolean
        hostname:
          type: string
          format: hostname
        publicKey:
          type: string
          format: binary
        POP:
          type: string
          format: binary
    NebulaConfiguration:
      type: string
      format: binary
    NebulaCSRStatus:
      type: string
      enum:
      - Pending
      - Completed
      - Expired
    NebulaCSRResponse:
      required:
      - NebulaCert
      type: object
      properties:
        NebulaCert:
          $ref: '#/components/schemas/NebulaCertificate'
        NebulaConf:
          $ref: '#/components/schemas/NebulaConfiguration'
      example:
        NebulaCert:
          Signature: ""
          NebulaCertificateDetails:
            Subnets:
            - Subnets
            - Subnets
            Issuer: Issuer
            Groups:
            - Groups
            - Groups
            PublicKey: ""
            IsCA: true
            NotBefore:
              ext: 6
              loc:
                extend: extend
                cacheEnd: 7
                cacheStart: 2
                tx:
                - isstd: true
                  isutc: true
                  index: 5
                  when: 5
                - isstd: true
                  isutc: true
                  index: 5
                  when: 5
                name: name
                zones:
                - offset: 1
                  isDST: true
                  name: name
                - offset: 1
                  isDST: true
                  name: name
                cacheZone: null
              wall: 0
            NotAfter: null
            Ips:
            - Ips
            - Ips
            InvertedGroups: ""
            Name: Name
        NebulaConf: ""
    ApiError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
