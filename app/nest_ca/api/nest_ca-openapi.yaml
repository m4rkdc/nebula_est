openapi: 3.0.3
info:
  title: Nebula CA service for NEST (Nebula Enrollment over Secure Transport) - OpenAPI 3.0
  description: |-
    This is a simple Nebula CA service that signs Nebula Public keys and generates Nebula Key Pairs and Certificates on behalf of the NEST service
  termsOfService: http://swagger.io/terms/
  contact:
    email: gianmarco.decola@studio.unibo.it
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.2.1
externalDocs:
  description: Find out more about NEST
  url: https://github.com/m4rkdc/nebula_est/tree/dev/app/nest_service/api/nebula_est-openapi.yaml
servers:
- url: "http://nest_ca/"

tags:
- name: ncsr
  description: Operations about a Nebula Certificate Signing Request made to the Nebula
    EST service and relayed to the Nebula CA service. It can either simply request to sign a client-generated Nebula Public
    Key or request to generate it on the server and then sign it.
- name: cacert
  description: Operations about the Nebula CA certs (i.e. getting the Nebula CA cert.).

paths:
  /ncsr/sign:
    post:
      tags:
      - ncsr
      summary: Sign a Nebula Public key
      description: Sign the provided Nebula Public key and return the generated certificate for the requiring hostname.
      operationId: certificateSign
      requestBody:
        description: The future Nebula hostname of the client requesting the certificate and its Nebula Public Key
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NebulaCSR'
        required: true
      responses:
        "201":
          description: "Successful operation: POP validated and Nebula Certificate issued."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAResponse'
        "400":
          description: "POP is not valid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 400
                message: POP could not be validated
        "500":
          description: Could not generate Nebula Certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 500
                message: Internal Server Error. Could not generate Nebula Certificate.

  /ncsr/generate:
    post:
      tags:
      - ncsr
      summary: Generate client's Nebula key pairs
      description: Generate client's Nebula key pairs on behalf of the NEST service
      operationId: generateKeys
      requestBody:
        description: The Nebula CSR of the client. Serverkeygen field must be true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NebulaCSR'
        required: true
      responses:
        "201":
          description: "Successful operation: Nebula key pair generated and certificate issued"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAResponse'
        "500":
          description: Could not generate Nebula Certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 500
                message: Internal Server Error. Could not generate Nebula Certificate.

  /cacerts:
    get:
      tags:
      - cacert
      summary: Gets Nebula CAs certs
      operationId: cacerts
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NebulaCertificate'
                x-content-type: application/json
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              example:
                code: 503
                message: "Internal Server Error: could not find the Nebula CA certificates"

components:
  schemas:
    NebulaCertificate:
      type: object
      properties:
        NebulaCertificateDetails:
          $ref: '#/components/schemas/Details'
        Signature:
          type: string
          format: binary
      example:
        Signature: ""
        NebulaCertificateDetails:
          Subnets:
          - Subnets
          - Subnets
          Issuer: Issuer
          Groups:
          - Groups
          - Groups
          PublicKey: ""
          IsCA: true
          NotBefore:
            ext: 6
            loc:
              extend: extend
              cacheEnd: 7
              cacheStart: 2
              tx:
              - isstd: true
                isutc: true
                index: 5
                when: 5
              - isstd: true
                isutc: true
                index: 5
                when: 5
              name: name
              zones:
              - offset: 1
                isDST: true
                name: name
              - offset: 1
                isDST: true
                name: name
              cacheZone: null
            wall: 0
          NotAfter: null
          Ips:
          - Ips
          - Ips
          InvertedGroups: ""
          Name: Name
    Details:
      type: object
      properties:
        Name:
          type: string
        Ips:
          type: array
          items:
            type: string
            format: ipv4 | ipv6
        Subnets:
          type: array
          items:
            type: string
            format: ipv4 | ipv6
        Groups:
          type: array
          items:
            type: string
        NotBefore:
          $ref: '#/components/schemas/Time'
        NotAfter:
          $ref: '#/components/schemas/Time'
        PublicKey:
          type: string
          format: binary
        IsCA:
          type: boolean
        Issuer:
          type: string
        InvertedGroups:
          type: object
          additionalProperties: true
      example:
        Subnets:
        - Subnets
        - Subnets
        Issuer: Issuer
        Groups:
        - Groups
        - Groups
        PublicKey: ""
        IsCA: true
        NotBefore:
          ext: 6
          loc:
            extend: extend
            cacheEnd: 7
            cacheStart: 2
            tx:
            - isstd: true
              isutc: true
              index: 5
              when: 5
            - isstd: true
              isutc: true
              index: 5
              when: 5
            name: name
            zones:
            - offset: 1
              isDST: true
              name: name
            - offset: 1
              isDST: true
              name: name
            cacheZone: null
          wall: 0
        NotAfter: null
        Ips:
        - Ips
        - Ips
        InvertedGroups: ""
        Name: Name
    Time:
      type: object
      properties:
        wall:
          type: integer
          format: uint64
        ext:
          type: integer
          format: int64
        loc:
          $ref: '#/components/schemas/Location'
      example:
        ext: 6
        loc:
          extend: extend
          cacheEnd: 7
          cacheStart: 2
          tx:
          - isstd: true
            isutc: true
            index: 5
            when: 5
          - isstd: true
            isutc: true
            index: 5
            when: 5
          name: name
          zones:
          - offset: 1
            isDST: true
            name: name
          - offset: 1
            isDST: true
            name: name
          cacheZone: null
        wall: 0
    Location:
      type: object
      properties:
        name:
          type: string
        zones:
          type: array
          items:
            $ref: '#/components/schemas/zone'
        tx:
          type: array
          items:
            $ref: '#/components/schemas/zoneTrans'
        extend:
          type: string
        cacheStart:
          type: integer
          format: int64
        cacheEnd:
          type: integer
          format: int64
        cacheZone:
          $ref: '#/components/schemas/zone'
      example:
        extend: extend
        cacheEnd: 7
        cacheStart: 2
        tx:
        - isstd: true
          isutc: true
          index: 5
          when: 5
        - isstd: true
          isutc: true
          index: 5
          when: 5
        name: name
        zones:
        - offset: 1
          isDST: true
          name: name
        - offset: 1
          isDST: true
          name: name
        cacheZone: null
    zone:
      type: object
      properties:
        name:
          type: string
        offset:
          type: integer
        isDST:
          type: boolean
      example:
        offset: 1
        isDST: true
        name: name
    zoneTrans:
      type: object
      properties:
        when:
          type: integer
          format: int64
        index:
          type: integer
          format: uint8
        isstd:
          type: boolean
        isutc:
          type: boolean
      example:
        isstd: true
        isutc: true
        index: 5
        when: 5

    NebulaCSR:
      type: object
      properties:
        serverKeygen:
          type: boolean
        rekey:
          type: boolean
        hostname:
          type: string
          format: hostname
        publicKey:
          type: string
          format: binary
        POP:
          type: string
          format: binary
        Groups:
          type: array
          items:
            type: string
    CAResponse:
      required:
      - NebulaCert
      type: object
      properties:
        NebulaCert:
          $ref: '#/components/schemas/NebulaCertificate'
        NebulaPrivateKey:
          type:
          format: binary
          
    ApiError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
