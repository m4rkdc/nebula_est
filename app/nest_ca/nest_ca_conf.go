/*
 * NEST: Nebula Enrollment over Secure Transport - OpenAPI 3.0
 *
 * This package contains the NEST_CA service routes and their REST API endpoints implementation, along with some service-specific utilities.
 * API version: 0.3.1
 * Contact: gianmarco.decola@studio.unibo.it
 */
package nest_ca

import (
	"github.com/m4rkdc/nebula_est/pkg/models"
)

var (
	//Folder to store the NEST client certificates generated by this service
	Certificates_path string = "certificates/"
	//The nebula-cert binary
	Ca_bin string = "config/bin/nebula-cert"
	//Folder containing NEST CA's Nebula certificate and private key used to sign client certificates
	Ca_keys_path string = "config/keys/"
	//This service's log file
	Log_file string = "log/nest_ca.log"
	//This service's IP address on the NEST SYSTEM Nebula network
	Service_ip string = "192.168.80.2"
	//This service's port
	Service_port string = "5353"
	//The NEST CA name
	Ca_name string = "NEST CA, Inc"
	//Folder containing this service's NEST system Nebula network keys and configurations
	Nebula_folder string = "config/nebula/"
)

/*
For mutual TLS authentication instead of setting up a Nebula tunnel between the nest_ca and nest_service

	func SetupTLS(caCertPool *x509.CertPool) *tls.Config {
	var tls_config = tls.Config{
	MinVersion:               tls.VersionTLS12,
	MaxVersion:               tls.VersionTLS13,
	PreferServerCipherSuites: true,
	ClientAuth:               tls.RequireAndVerifyClientCert,
	CipherSuites: []uint16{
	tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
	tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
	},
	ClientCAs: caCertPool,
	}
	return &tls_config
	}
*/

// Ca_routes contains the routes considered by the nest_ca router
var Ca_routes = [3]models.Route{
	{
		Name:        "Cacerts",
		Method:      "GET",
		Pattern:     "/cacerts",
		HandlerFunc: Cacerts,
	},
	{
		Name:        "CertificateSign",
		Method:      "POST",
		Pattern:     "/ncsr/sign",
		HandlerFunc: CertificateSign,
	},
	{
		Name:        "GenerateKeys",
		Method:      "POST",
		Pattern:     "/ncsr/generate",
		HandlerFunc: GenerateKeys,
	},
}
