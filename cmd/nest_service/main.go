/*
 * Nebula Enrollment over Secure Transport - OpenAPI 3.0
 *
 * This is a simple Public Key Infrastructure Management Server based on the RFC7030 Enrollment over Secure Transport Protocol for a Nebula Mesh Network. The Service accepts requests from mutually authenticated TLS-PSK connections to create Nebula Certificates for the client, either by signing client-generated Nebula Public Keys or by generating Nebula key pairs and signing the server-generated Nebula public key and to create Nebula configuration files for the specific client. This Service acts as a Facade for the Nebula CA service (actually signign or creating the Nebula keys) and the Nebula Config service (actually creating the nebula Config. files).
 *
 * API version: 0.1.1
 * Contact: gianmarco.decola@studio.unibo.it
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"log"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/m4rkdc/nebula_est/app/nest_service"
)

var service_ip string = "localhost"
var service_port string = "8080"

func main() {
	log.Printf("Server started")
	val, ok := os.LookupEnv("SERVICE_IP")
	if ok {
		service_ip = val
	}
	val, ok = os.LookupEnv("SERVICE_PORT")
	if ok {
		service_port = val
	}

	router := gin.Default()
	for _, r := range nest_service.Service_routes {
		switch r.Method {
		case "GET":
			router.GET(r.Pattern, r.HandlerFunc)
		case "POST":
			router.POST(r.Pattern, r.HandlerFunc)
		}
	}
	router.Run(service_ip + ":" + service_port)
}
